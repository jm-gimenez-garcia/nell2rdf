package fr.ste.lod.crew;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.jena.rdf.model.Model;
import org.apache.log4j.Logger;

import fr.ste.lod.crew.beans.NellModel;
import fr.ste.lod.crew.extract.ExtractNell;
import fr.ste.lod.crew.extract.WriteNell;
import fr.ste.lod.crew.utils.NellMapper;

/**
 * Main class of the program that provides {@link #main(String[])}.
 * @author Christophe Gravier & Quentin Cruzille
 */
public class NellOntologyConverter {

	public static Logger log = Logger.getLogger(NellOntologyConverter.class);

	/**
	 * Input file containing the NELL ontology.
	 */
	private String ontologyFile;

	/**
	 * Prefix to use when creating new triples in Nell RDF model.
	 */
	private String prefix;

	/**
	 * Output turtle file to create.
	 */
	private String rdfFileName;

	/**
	 * In-memory representation of the Nell CSV ontology (collection of subject/object for all possible predicate.)
	 */
	private NellModel nellOntologyModel = new NellModel();

	/**
	 * Generate and dump a Jena model out of a Nell ontology.
	 * @param csvFileName comma-separated Nell ontology file as generated by CMU team.
	 * @param prefix prefix to the ontology.
	 * @param rdfFileName Absolute path to the turtle file where to serialize the Jena ontology as turtle on the filesystem.
	 */
	public NellOntologyConverter(String csvFileName, String prefix, String rdfFileName) {
		super();
		this.ontologyFile = csvFileName;
		this.prefix = prefix;
		this.rdfFileName = rdfFileName;
	}

	/**
	 * Create a Jena model for this Nell in-memory ontology.
	 * @return Nell ontology as a Jena model.
	 */
	public Model convert() {
		log.info("Loading NELL ontology into memory ...");
		nellOntologyModel.createModel(this.ontologyFile);
		log.info("Done.");

		log.info("Mapping NELL ontology to a RDF model ...");
		Model nellInRDF = nellOntologyModel.mapToRDFModel(prefix);
		log.info("Done.");
		return nellInRDF;
	}

	/**
	 * Builds an information on expected program usage.
	 * @return a string specifying how to use this program.
	 */
	private static String usage() {
		StringBuffer sb = new StringBuffer();
		sb.append("--------------------------------------------------------\n" + "This is Nell to RDF converter program.\n\n" + "-----------------------------------------------------------\n"
				+ "You should call this program with the following arguments :\n");
		sb.append("1- Desired prefix for the ontology to create. E.g. \"http://ste-lod-crew.fr/nell/\"\n");
		sb.append("2- Absolute path to nell csv ontology file. E.g. \"/Users/cgravier/Desktop/NELL.08m.670.ontology.csv\"\n");
		sb.append("3- Absolute path where to serialize the RDF model. E.g. \"/Users/cgravier/Desktop/NELL.08m.670.ontology.ttl\"\n");
		sb.append("4- Absolute path to nell csv instance file. E.g. \"/Users/cgravier/Desktop/NELL.08m.670.instances.csv\"\n");
		sb.append("5- Absolute path where to serialize the RDF instances. E.g. \"/Users/cgravier/Desktop/NELL.08m.670.instances.ttl\"\n");
		return sb.toString();
	}

	/**
	 * Checks if the program arguments are valid. For now it only checks if there are precisely 3 arguments.
	 * @param args Array of program argument as strings.
	 * @return true if the number of arguments equals 5 and the Nell csv files (args[1] and args[3] values) exists on the filesystem.
	 */
	private static boolean areSuppliedArgumentsOK(String[] args) {

		if (args.length != 5)
			return false;

		File f = new File(args[1]);
		File n = new File(args[3]);
		return (f.exists() && f.isFile() && n.exists() && n.isFile());
	}

	/**
	 * Program entry point.
	 * @param args such as :
	 *            <ul>
	 *            <li>args[0] : prefix to use.</li>
	 *            <li>args[1] : absolute path to nell ontology file on your FS.</li>
	 *            <li>args[2] : absolute path to the output turtle file to create on your FS.</li>
	 *            <li>args[3] : absolute path to the nell file on your FS.</li>
	 *            <li>args[4] : absolute path to the output turtle file for nell to create on your FS.</li>
	 *            </ul>
	 */
	public static void main(String[] args) {

		if (!NellOntologyConverter.areSuppliedArgumentsOK(args)) {
			log.error(NellOntologyConverter.usage());
			System.exit(0);
		}

		String prefix = args[0];
		String ontologyFile = args[1];
		String outputFile = args[2];
		String nellFile = args[3];
		String outputNellToRDF = args[4];

		// create an in-memory model of the NELL csv file.
		log.info("Build an in-memory model of Nell ontology as a CSV file...");
		NellOntologyConverter converter = new NellOntologyConverter(ontologyFile, prefix, outputFile);
		log.info("Done.");

		// convert this model to a Jena model.
		log.info("Converting the Nell in-memory model to a Jena model...");
		Model nellRdfOntology = converter.convert();
		log.info("Done.");

		/*
		 * display some stats on the Jena model check that everything for leveraged by having the same stats on the NELL ontology model using ith the bash script provided at
		 * src/main/resources/printNelCsvStats)
		 */
		NellMapper.displayStats(nellRdfOntology, converter.getNellOntologyModel(), prefix);

		// dump the Jena model to file system
		log.info("Dumping ontology model to FS...");
		try {
			converter.dumpNellRdfModelToFile(nellRdfOntology);
		} catch (IOException e) {
			e.printStackTrace();
		}
		log.info("Done, Jena model dumped to " + outputFile);

		log.info("Start converting Nell instances into Jena Model");
		converter.translateNellInstancesToRDF(nellFile, outputNellToRDF, prefix);
		
	}

	/**
	 * Dump Nell RDF model to filesystem.
	 * @param outputFile Absolute path of the file where to serialize the model.
	 */
	private void dumpNellRdfModelToFile(Model nellOntology) throws IOException {
		OutputStream outStream = new FileOutputStream(this.rdfFileName);
		nellOntology.write(outStream, "N3");
		outStream.flush();
		outStream.close();
	}

	/**
	 * From the <code>input</code> file corresponding to a Nell instances file, create as many instances using <code>prefix</code> as IRI, and then dump to <code>output</code> file.
	 * @param nellInstanceFile Absolute path to a Nell instance file
	 * @param rdfInstanceFile Absolute path to where to dump instances on the FS
	 * @param prefix Prefix to use when creating new IRIs.
	 */
	private void translateNellInstancesToRDF(String nellInstanceFile, String rdfInstanceFile, String prefix) {
		
		boolean n3 = false;
		boolean turtle=true;
		boolean rdf=false;
		ExtractNell extract = new ExtractNell(prefix);
		WriteNell write;
		extract.extraction(nellInstanceFile);
		System.out.println("Model extraction Done.");
		write = new WriteNell(extract.getTranslator().getModel(),rdf,turtle,n3, rdfInstanceFile);
		write.write();
		System.out.println("Serialisation complete to "+rdfInstanceFile);
		
//		Extract extractor = new Extract(nellInstanceFile, prefix);
//		Write write;
//		log.info("Extract and translate begin from " + nellInstanceFile);
//		extractor.extraction();
//		log.info("Extract and translate done, write begin in " + rdfInstanceFile);
//		write = new Write(extractor.getTranslator().getModel(), rdfInstanceFile);
//		write.write();
//		log.info("Write done");
	}

	/** Getters and Setters */
	public NellModel getNellOntologyModel() {
		return nellOntologyModel;
	}

	public void setNellOntologyModel(NellModel nellOntologyModel) {
		this.nellOntologyModel = nellOntologyModel;
	}
}
